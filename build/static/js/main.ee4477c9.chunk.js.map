{"version":3,"sources":["logo.svg","server/defaultState.js","store/mutations.js","store/history.js","store/sagas.js","store/index.js","components/TaskList.jsx","components/Dashboard.jsx","components/Navigation.jsx","components/TaskDetail.jsx","components/Login.jsx","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["defaultState","session","authenticated","users","id","name","passwordHash","md5","groups","owner","tasks","group","isComplete","comments","task","content","REQUEST_TASK_CREATION","CREATE_TASK","SET_TASK_COMPLETION","SET_TASK_NAME","SET_TASK_GROUP","REQUEST_AUTH_USER","PROCESSING_AUTH_USER","AUTHENTICATING","NOT_AUTHENTICATED","SET_STATE","createTask","taskID","groupID","ownerID","type","processAuthenticateUser","status","setState","state","history","createBrowserHistory","taskCreationSaga","taskModificationSaga","userAuthenticationSage","rootSaga","take","mutations","entity","uuid","put","axios","post","res","updateAction","taskGroup","taskName","username","password","data","push","Error","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","userSession","action","console","log","map","applyMiddleware","createLogger","run","ConnectedTaskList","connect","ownProps","filter","dispatch","createNewTask","className","Link","to","onClick","ConnectedDashboard","ConnectedNavigation","ConnectedTaskDetail","match","params","find","setTaskCompletion","setTaskName","e","target","value","setTaskGroup","onChange","ConnectedLogin","authenticateUser","preventDefault","onSubmit","placeholder","defaultValue","RouteGuard","Component","getState","Redirect","Main","Router","Route","exact","path","component","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ee4477c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import md5 from 'md5';\n\nexport const defaultState = {\n  session: {\n    authenticated: false\n  },\n  users: [{\n    id: \"U1\",\n    name: \"yan fu\",\n    passwordHash: md5(\"123\")\n  }, {\n    id: \"U2\",\n    name: \"hao ji\",\n    passwordHash: md5(\"666\")\n  }],\n  groups: [{\n    name: \"To Do\",\n    id: \"G1\",\n    owner: \"U1\"\n  }, {\n    name: \"Doing\",\n    id: \"G2\",\n    owner: \"U1\"\n  }, {\n    name: \"Done\",\n    id: \"G3\",\n    owner: \"U1\"\n  }],\n  tasks: [{\n    name: \"Design the SmartReply pipeline\",\n    id: \"T1\",\n    group: \"G2\",\n    owner: \"U1\",\n    isComplete: false\n  }, {\n    name: \"1-1 with Olga\",\n    id: \"T2\",\n    group: \"G1\",\n    owner: \"U2\",\n    isComplete: false\n  }, {\n    name: \"Update the OneCert\",\n    id: \"T3\",\n    group: \"G3\",\n    owner: \"U1\",\n    isComplete: true\n  }],\n  comments: [{\n    owner: \"U1\",\n    id: \"C1\",\n    task: \"T1\",\n    content: \"Really Urgent!!!\"\n  }]\n}","export const REQUEST_TASK_CREATION = `REQUEST_TASK_CREATION`;\nexport const CREATE_TASK = `CREATE_TASK`;\nexport const SET_TASK_COMPLETION = `SET_TASK_COMPLETION`;\nexport const SET_TASK_NAME = `SET_TASK_NAME`;\nexport const SET_TASK_GROUP = `SET_TASK_GROUP`;\nexport const REQUEST_AUTH_USER = `REQUEST_AUTH_USER`;\nexport const PROCESSING_AUTH_USER = `PROCESSING_AUTH_USER`;\nexport const AUTHENTICATING = `AUTHENTICATING`;\nexport const AUTHENTICATED = `AUTHENTICATED`;\nexport const NOT_AUTHENTICATED = `NOT_AUTHENTICATED`;\nexport const SET_STATE = `SET_STATE`;\n\n//action\nexport const requestTaskCreation = (groupID) => ({\n  type: REQUEST_TASK_CREATION,\n  groupID\n});\n\nexport const createTask = (taskID, groupID, ownerID) => ({\n  type: CREATE_TASK,\n  taskID,\n  groupID,\n  ownerID\n});\n\nexport const setTaskCompletion = (taskID, isComplete, taskGroup) => ({\n  type: SET_TASK_COMPLETION,\n  taskID,\n  isComplete,\n  taskGroup\n})\n\nexport const setTaskName = (taskID, taskName) => ({\n  type: SET_TASK_NAME,\n  taskID,\n  taskName\n})\n\nexport const setTaskGroup = (taskID, taskGroup) => ({\n  type: SET_TASK_GROUP,\n  taskID,\n  taskGroup\n})\n\nexport const requestAuthenticateUser = (username, password) => ({\n  type: REQUEST_AUTH_USER,\n  username,\n  password\n})\n\nexport const processAuthenticateUser = (status = AUTHENTICATING, session = null) => ({\n  type: PROCESSING_AUTH_USER,\n  session,\n  authenticated: status\n})\n\nexport const setState = (state = {}) => ({\n  type:SET_STATE,\n  state\n})","import {createBrowserHistory} from \"history\";\n\nexport const history = createBrowserHistory();","import {\n  take,\n  put,\n  fork,\n  all\n} from 'redux-saga/effects';\nimport * as mutations from './mutations';\nimport {v4 as uuid} from 'uuid';\nimport axios from 'axios';\nimport {history} from './history';\nimport {SET_TASK_COMPLETION} from \"./mutations\";\n\nconst url = process.env.NODE_ENV === 'production' ? `` : \"http://localhost:8888\";\n\nexport function* taskCreationSaga() {\n  while (true) {\n    const entity = yield take(mutations.REQUEST_TASK_CREATION);\n    const {groupID} = entity;\n    const ownerID = `U1`;\n    const taskID = uuid();\n    yield put(mutations.createTask(taskID, groupID, ownerID));\n    const {res} = yield axios.post(url + '/task/new', {\n      task: {\n        id: taskID,\n        group: groupID,\n        owner: ownerID,\n        isComplete: false,\n        name: \"New task\"\n      }\n    });\n  }\n}\n\nexport function* taskModificationSaga() {\n  while (true) {\n    const updateAction = yield take([\n      mutations.SET_TASK_GROUP,\n      mutations.SET_TASK_NAME,\n      mutations.SET_TASK_COMPLETION\n    ]);\n    const {res} = yield axios.post(url + '/task/update', {\n      task: {\n        id: updateAction.taskID,\n        group: updateAction.taskGroup,\n        name: updateAction.taskName,\n        isComplete: updateAction.isComplete\n      }\n    })\n  }\n}\n\nexport function* userAuthenticationSage() {\n  while (true) {\n    const {username, password} = yield take(mutations.REQUEST_AUTH_USER);\n    try {\n      const {data} = yield axios.post(url + `/authenticate`, {username, password});\n      yield put(mutations.setState(data.state));\n      history.push(`/dashboard`);\n      if (!data) {\n        throw new Error();\n      }\n    } catch (e) {\n      yield put(mutations.processAuthenticateUser(mutations.NOT_AUTHENTICATED));\n    }\n\n  }\n}\n\nexport function* rootSaga() {\n  yield all([\n    fork(taskCreationSaga),\n    fork(taskModificationSaga),\n    fork(userAuthenticationSage)\n  ])\n}","import {applyMiddleware, createStore, combineReducers} from \"redux\";\nimport {defaultState} from \"../server/defaultState\";\nimport {createLogger} from \"redux-logger/src\";\nimport createSagaMiddleware from 'redux-saga';\nimport {rootSaga} from './sagas';\n\nimport * as mutations from './mutations';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = createStore(\n  //reducer 定义了具体如何更新action,saga中间件在redux中提供了监控机制\n  combineReducers({\n    session(userSession = defaultState.session || {}, action) {\n      const {type, authenticated, session} = action;\n      switch (type) {\n        case mutations.REQUEST_AUTH_USER:\n          return {...userSession, authenticated: mutations.AUTHENTICATING};\n        case mutations.PROCESSING_AUTH_USER:\n          return {...userSession, authenticated};\n        case mutations.SET_STATE:\n          return {...userSession, id: action.state.session.id};\n        default:\n          return userSession;\n      }\n    },\n    tasks(tasks = defaultState.tasks, action) {\n      switch (action.type) {\n        case mutations.SET_STATE:\n          return action.state.tasks;\n        case mutations.CREATE_TASK:\n          return [...tasks, {\n            id: action.taskID,\n            name: \"New Task\",\n            group: action.groupID,\n            owner: action.ownerID,\n            isComplete: false\n          }]\n        case mutations.SET_TASK_COMPLETION:\n          console.log('action', action);\n          return tasks.map(task => (\n            task.id === action.taskID ?\n              {...task, isComplete: action.isComplete, group: action.taskGroup}\n              : task\n          ));\n        case mutations.SET_TASK_NAME:\n          return tasks.map(task => (\n            task.id === action.taskID ? {...task, name: action.taskName} : task\n          ));\n        case mutations.SET_TASK_GROUP:\n          return tasks.map(task => (\n            task.id === action.taskID ? {...task, group: action.taskGroup} : task\n          ));\n        default:\n          return tasks;\n      }\n      return tasks;\n    },\n    comments(comments = defaultState.comments) {\n      return comments;\n    },\n    groups(groups = defaultState.groups, action) {\n      switch (action.type) {\n        case mutations.SET_STATE:\n          return action.state.groups;\n        default:\n          return groups;\n      }\n    },\n    users(users = defaultState.users, action) {\n      switch (action.type) {\n        case mutations.SET_STATE:\n          return action.state.users;\n        default:\n          return users;\n      }\n    }\n  }),\n  applyMiddleware(createLogger(), sagaMiddleware)\n  )\n;\n\n//run: 开始注册运行saga，saga中在监控action,再根据监控的action去操作创建出新的action\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport * as mutations from '../store/mutations';\n\nexport const TaskList = ({tasks, name, id, createNewTask}) => (\n  <div className={\"card p-2 m-2\"}>\n    <h3>\n      {name}\n    </h3>\n    {tasks.map(task => (\n      <Link to={`/task/${task.id}`} key={task.id}>\n        <div className={\"card p-2 mt-2\"}>\n          {task.name}\n        </div>\n      </Link>\n    ))}\n    <button onClick={() => createNewTask(id)} className={\"btn btn-primary btn-block mt-2\"}>Add New</button>\n  </div>\n);\n\nconst mapStateToProps = (state, ownProps) => {\n  let groupID = ownProps.id;\n  return {\n    name: ownProps.name,\n    id: groupID,\n    tasks: state.tasks.filter(task => task.group === groupID)\n  }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    createNewTask(id) {\n      dispatch(mutations.requestTaskCreation(id));\n    }\n  }\n}\n\nexport const ConnectedTaskList = connect(mapStateToProps, mapDispatchToProps)(TaskList);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {ConnectedTaskList} from \"./TaskList\";\n\nexport const Dashboard = ({groups}) => (\n  <div className={\"row\"}>\n    {groups.map(group => (\n      <ConnectedTaskList key={group.id} id={group.id} name={group.name} className={\"col\"}/>\n    ))}\n  </div>\n);\n\nconst mapStateToProps = (state) => {\n  return {\n    groups: state.groups\n  }\n}\n\nexport const ConnectedDashboard = connect(mapStateToProps)(Dashboard);","import {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport React from 'react';\n\nconst Navigation = () => (\n  <div>\n    <Link to=\"/dashboard\">\n      <h1>\n        Go To Task Dashboard\n      </h1>\n    </Link>\n  </div>\n)\n\nexport const ConnectedNavigation = connect(state => state)(Navigation);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport * as mutations from '../store/mutations';\n\nconst TaskDetail = ({\n                      id,\n                      comments,\n                      groups,\n                      task,\n                      isComplete,\n                      setTaskCompletion,\n                      setTaskName,\n                      setTaskGroup,\n                    }) => (\n  <div className=\"card p-3 col-6\">\n    <h3>\n      <input onChange={setTaskName} value={task.name} className=\"form-control form-control-lg\"/>\n    </h3>\n    <div>\n      <button onClick={() => setTaskCompletion(id, !isComplete, isComplete ? \"G1\" : \"G3\")} className=\"btn btn-primary\">\n        {isComplete ? \"Reopen\" : \"complete\"}\n      </button>\n    </div>\n    <div className=\"form-inline mt-3\">\n      <select onChange={setTaskGroup} value={task.group} className=\"form-control\">\n        {groups.map(group =>\n          <option\n            key={group.id}\n            value={group.id}\n          >\n            {group.name}\n          </option>)}\n      </select>\n    </div>\n    <div>\n      <Link to=\"/dashboard\">\n        <button className=\"btn btn-primary mt-2\">Done</button>\n      </Link>\n    </div>\n  </div>\n);\nconst mapStateToProps = (state, ownProps) => {\n  let id = ownProps.match.params.id;\n  let task = state.tasks.find(task => task.id === id);\n  let groups = state.groups;\n\n  return {\n    id,\n    task,\n    groups,\n    isComplete: task.isComplete\n  }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  let id = ownProps.match.params.id;\n  return {\n    setTaskCompletion(id, isComplete) {\n      dispatch(mutations.setTaskCompletion(id, isComplete));\n    },\n    setTaskName(e) {\n      dispatch(mutations.setTaskName(id, e.target.value));\n    },\n    setTaskGroup(e) {\n      dispatch(mutations.setTaskGroup(id, e.target.value));\n    }\n  };\n};\n\nexport const ConnectedTaskDetail = connect(mapStateToProps, mapDispatchToProps)(TaskDetail);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport * as mutations from '../store/mutations';\n\nconst LoginComponent = ({authenticated, authenticateUser}) => {\n  return (\n    <div className={\"card p-2 col-6\"}>\n      <h2>\n        Please Login\n      </h2>\n      <form onSubmit={authenticateUser}>\n        <input type=\"text\" placeholder={\"user name\"} name={\"username\"} defaultValue={\"yan fu\"}\n               className=\"form-control\"/>\n        <input type=\"text\" placeholder={\"password\"} name={\"password\"} defaultValue={\"\"} className=\"form-control mt-2\"/>\n        <button type={\"submit\"} className=\"form-control mt-2 btn btn-primary\">Login</button>\n        {authenticated === mutations.NOT_AUTHENTICATED ? <p>Not Authenticated!</p> : null}\n      </form>\n    </div>\n  )\n}\n\nconst mapStateToProps = ({session}) => ({\n  authenticated: session.authenticated\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  authenticateUser(e) {\n    e.preventDefault();\n    let username = e.target[`username`].value;\n    let password = e.target[`password`].value;\n    dispatch(mutations.requestAuthenticateUser(username, password));\n  }\n})\nexport const ConnectedLogin = connect(mapStateToProps, mapDispatchToProps)(LoginComponent);","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {store} from '../store';\nimport {ConnectedDashboard} from \"./Dashboard\";\nimport {Router, Route, Redirect} from \"react-router-dom\";\nimport {history} from \"../store/history\";\nimport {ConnectedNavigation} from \"./Navigation\";\nimport {ConnectedTaskDetail} from './TaskDetail'\nimport {ConnectedLogin} from \"./Login\";\n\nconst RouteGuard = Component => ({match}) => {\n  if (!store.getState().session.authenticated) {\n    return <Redirect to=\"/login\"/>\n  }\n  return <Component match={match}/>\n}\n\nexport const Main = () => (\n  <Router history={history}>\n    <Provider store={store}>\n      <div>\n        <ConnectedNavigation/>\n        <Route exact path=\"/\" component={ConnectedLogin}/>\n        <Route exact path=\"/login\" component={ConnectedLogin}/>\n        <Route\n          exact\n          path=\"/dashboard\"\n          render={RouteGuard(ConnectedDashboard)}\n        />\n        <Route\n          exact\n          path=\"/task/:id\"\n          render={RouteGuard(ConnectedTaskDetail)}\n        />\n      </div>\n    </Provider>\n  </Router>\n)","import logo from './logo.svg';\nimport './App.css';\nimport { store } from './store';\nimport { Main } from './components/Main';\n\nfunction App() {\n  return (\n        <Main />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}